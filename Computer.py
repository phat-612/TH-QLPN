import json


class Computer:
    def getData(self):
        try:
            with open("database/computers.json", "r", encoding="utf-8") as file:
                data = json.load(file)  # l·∫•y d·ªØ li·ªáu
        except (FileNotFoundError, json.JSONDecodeError):
            data = {"computers": []}  # N·∫øu file kh√¥ng t·ªìn t·∫°i ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        return data

    def saveData(self, data):
        # Ghi l·∫°i d·ªØ li·ªáu v√†o file
        with open("database/computers.json", "w", encoding="utf-8") as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
    def __init__(self):
        pass
    def addComputer(self, computer_id=None, monitor=None, cpu=None, ram=None, storage_type=None, storage_capacity=None, status=None):
        data = self.getData()

        # N·∫øu kh√¥ng truy·ªÅn `computer_id`, l·∫•y id cu·ªëi c√πng + 1
        if computer_id is None:
            if data["computers"]:
                last_id = max(computer["computer_id"] for computer in data["computers"])
                self.computer_id = last_id + 1
            else:
                self.computer_id = 1  # N·∫øu danh s√°ch r·ªóng, b·∫Øt ƒë·∫ßu t·ª´ 1
        else:
            self.computer_id = computer_id

        self.monitor = monitor
        self.cpu = cpu
        self.ram = ram
        self.storage_type = storage_type
        self.storage_capacity = storage_capacity
        self.status = status

        # Th√™m th√¥ng tin m√°y t√≠nh m·ªõi v√†o danh s√°ch "computers"
        new_computer = {
            "computer_id": self.computer_id,
            "configuration": {
                "monitor": self.monitor,
                "CPU": self.cpu,
                "RAM": self.ram,
                "storageType": self.storage_type,
                "storageCapacity": self.storage_capacity,
                "status": self.status
            }
        }
        data["computers"].append(new_computer)
        self.saveData(data)  # L∆∞u l·∫°i d·ªØ li·ªáu m·ªõi v√†o file
        print(f"M√°y t√≠nh c√≥ ID {self.computer_id} ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.")
    def editComputer (self, computer_id=None, monitor=None, cpu=None, ram=None, storage_type=None, storage_capacity=None, status=None):
        if computer_id is None:
            print('M√°y t√≠nh kh√¥ng t·ªìn t·∫°i')
        data = self.getData()
        # T√¨m m√°y t√≠nh theo ID
        computers = data['computers']
        isEdit = False
        for computer in computers:
            if computer['computer_id'] == computer_id:
                # C·∫≠p nh·∫≠t th√¥ng tin m√°y t√≠nh
                if monitor is not None:
                    computer['configuration']['monitor'] = monitor
                if cpu is not None:
                    computer['configuration']['CPU'] = cpu
                if ram is not None:
                    computer['configuration']['RAM'] = ram
                if storage_type is not None:
                    computer['configuration']['storageType'] = storage_type
                if storage_capacity is not None:
                    computer['configuration']['storageCapacity'] = storage_capacity
                if status is not None:
                    computer['configuration']['status'] = status
                isEdit = True
                break
        if not isEdit:
            print(f"M√°y t√≠nh v·ªõi ID {computer_id} kh√¥ng t·ªìn t·∫°i.")
            return
        # L∆∞u l·∫°i d·ªØ li·ªáu ƒë√£ ch·ªânh s·ª≠a v√†o file
        print(f"M√°y t√≠nh v·ªõi ID {computer_id} ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a th√†nh c√¥ng.")
        self.saveData(data)
    def deleteComputer (self, computer_id):
        if computer_id is None:
            print('M√°y t√≠nh kh√¥ng t·ªìn t·∫°i')
        data = self.getData()
        # T√¨m m√°y t√≠nh theo ID
        computers = data['computers']
        isDelete = False
        for computer in computers:
            if computer['computer_id'] == computer_id:
                isDelete = True
                data['computers'].remove(computer)
                break
        if not isDelete:
            print(f"M√°y t√≠nh v·ªõi ID {computer_id} kh√¥ng t·ªìn t·∫°i.")
            return
        # L∆∞u l·∫°i d·ªØ li·ªáu ƒë√£ ch·ªânh s·ª≠a v√†o file
        print(f"M√°y t√≠nh v·ªõi ID {computer_id} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.")
        self.saveData(data)
    def getComputer(self, computer_id=None):
        data = self.getData()
        computers = data["computers"]
        if computer_id is None:
            return computers
        for computer in computers:
            if computer["computer_id"] == computer_id:
                return computer
        return None
    def showAllComputer(self):
        data = self.getData()
        computers = data["computers"]
        if len(computers) == 0:
            print("Kh√¥ng c√≥ m√°y t√≠nh n√†o")
        for index, computer in enumerate(computers, start=1):
            print(f"\nüñ•Ô∏è M√°y t√≠nh {index}:")
            print(f"   üÜî ID: {computer['computer_id']}")
            print(f"   üñ•Ô∏è M√†n h√¨nh: {computer['configuration']['monitor']}")
            print(f"   üî¢ CPU: {computer['configuration']['CPU']}")
            print(f"   üíæ RAM: {computer['configuration']['RAM']}")
            print(f"   üóÑÔ∏è Lo·∫°i ·ªï c·ª©ng: {computer['configuration']['storageType']}")
            print(f"   üíΩ Dung l∆∞·ª£ng ·ªï c·ª©ng: {computer['configuration']['storageCapacity']}")
            print(f"   ‚úÖ Tr·∫°ng th√°i: {computer['configuration']['status']}")

# computers = Computer()
# computers.addComputer(monitor="LG", cpu="Intel i5", ram="16GB", storage_type="SSD", storage_capacity="512GB", status="Available")
# computers.showAllComputer()
